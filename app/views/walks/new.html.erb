<div class="section grey-text text-darken-3 center-align">
	<h2>Request a walk</h2>
</div>

 <body>
  <input id="origin-input" value="" class="controls" type="text"
      placeholder="Enter an origin location">

  <input id="destination-input" class="controls" type="text"
      placeholder="Enter a destination location">
  <button type="submit" id="submission_form" class="controls">Enter your coordonates </button>

  <div id="mode-selector" class="controls">
    <input type="radio" name="type" id="changemode-walking" checked="checked">
    <label for="changemode-walking">Walking</label>

    <!-- <input type="radio" name="type" id="changemode-transit">
    <label for="changemode-transit">Transit</label>

    <input type="radio" name="type" id="changemode-driving">
    <label for="changemode-driving">Driving</label> -->
  </div>

  <div id="map"></div>

   <script>
		function initMap() {
		  var origin_place_id = null;
		  var destination_place_id = null;
		  var travel_mode = google.maps.TravelMode.WALKING;
	    navigator.geolocation.getCurrentPosition(function (position) {
	     var latitude = position.coords.latitude;
	     var longitude = position.coords.longitude;
	     var coords = new google.maps.LatLng(latitude, longitude);
	     var map = new google.maps.Map(document.getElementById('map'), {
	       mapTypeControl: false,
	       center: coords,
	       zoom: 15
	     });

	  	 // Place a draggable marker on the map
			var marker = new google.maps.Marker({
			    position: coords,
			    map: map,
			    draggable:true,
			    title:"Drag me!"
			});

			////// Add reverse-geocoding////////
			var infowindow = new google.maps.InfoWindow({
	    content: "you are here"
		  });

			var geocoder = new google.maps.Geocoder;
			var infowindow = new google.maps.InfoWindow;

		  marker.addListener('click', function() {
		    geocodeLatLng(geocoder, map, infowindow);
		  });

		  function geocodeLatLng(geocoder, map, infowindow) {
		  var input = (latitude+","+longitude);
		  var latlngStr = input.split(',', 2);
		  var latlng = {lat: parseFloat(latlngStr[0]), lng: parseFloat(latlngStr[1])};
		  geocoder.geocode({'location': latlng}, function(results, status) {
		    if (status === google.maps.GeocoderStatus.OK) {
		      if (results[1]) {
		        map.setZoom(16);
		        var marker = new google.maps.Marker({
		          position: latlng,
		          map: map
		        });
		        infowindow.setContent(results[1].formatted_address);
		        infowindow.open(map, marker);
		      } else {
		        window.alert('No results found');
		      }
		    } else {
		      window.alert('Geocoder failed due to: ' + status);
		    }
		  });
		 }
		 ////////////////////// END ///////////////////

		  var directionsService = new google.maps.DirectionsService;
		  var directionsDisplay = new google.maps.DirectionsRenderer;
		  directionsDisplay.setMap(map);

		  var origin_input = document.getElementById('origin-input');
		  var destination_input = document.getElementById('destination-input');
		  var modes = document.getElementById('mode-selector');
		  var submit_form = document.getElementById('submission_form')

		  map.controls[google.maps.ControlPosition.TOP_LEFT].push(origin_input);
		  map.controls[google.maps.ControlPosition.TOP_LEFT].push(destination_input);
		  map.controls[google.maps.ControlPosition.TOP_LEFT].push(modes);
		  map.controls[google.maps.ControlPosition.TOP_LEFT].push(submit_form);

		  var origin_autocomplete = new google.maps.places.Autocomplete(origin_input);
		  origin_autocomplete.bindTo('bounds', map);
		  var destination_autocomplete =
		      new google.maps.places.Autocomplete(destination_input);
		  destination_autocomplete.bindTo('bounds', map);

		  // Sets a listener on a radio button to change the filter type on Places
		  // Autocomplete.
			  function setupClickListener(id, mode) {
			    var radioButton = document.getElementById(id);
			    radioButton.addEventListener('click', function() {
			      travel_mode = mode;
			    });
			  }
			  setupClickListener('changemode-walking', google.maps.TravelMode.WALKING);
			  // setupClickListener('changemode-transit', google.maps.TravelMode.TRANSIT);
			  // setupClickListener('changemode-driving', google.maps.TravelMode.DRIVING);

			  function expandViewportToFitPlace(map, place) {
			    if (place.geometry.viewport) {
			      map.fitBounds(place.geometry.viewport);
			    } else {
			      map.setCenter(place.geometry.location);
			      map.setZoom(17);
			    }
			  }

			  origin_autocomplete.addListener('place_changed', function() {
			    var place = origin_autocomplete.getPlace();
			    if (!place.geometry) {
			      window.alert("Autocomplete's returned place contains no geometry");
			      return;
			    }
			    expandViewportToFitPlace(map, place);

			    // If the place has a geometry, store its place ID and route if we have
			    // the other place ID
			    origin_place_id = place.place_id;
			    route(origin_place_id, destination_place_id, travel_mode,
			          directionsService, directionsDisplay);
			  });

			  destination_autocomplete.addListener('place_changed', function() {
			    var place = destination_autocomplete.getPlace();
			    if (!place.geometry) {
			      window.alert("Autocomplete's returned place contains no geometry");
			      return;
			    }
			    expandViewportToFitPlace(map, place);

			    // If the place has a geometry, store its place ID and route if we have
			    // the other place ID
			    destination_place_id = place.place_id;
			    route(origin_place_id, destination_place_id, travel_mode,
			          directionsService, directionsDisplay);
			  });

			  //////// Logic for creating the route between two destinations ///////////
			  function route(origin_place_id, destination_place_id, travel_mode,
			                 directionsService, directionsDisplay) {
			    if (!origin_place_id || !destination_place_id) {
			      return;
			    }
			    directionsService.route({
			      origin: {'placeId': origin_place_id},
			      destination: {'placeId': destination_place_id},
			      travelMode: travel_mode
			    }, function(response, status) {
			      if (status === google.maps.DirectionsStatus.OK) {
			        directionsDisplay.setDirections(response);
			      } else {
			        window.alert('Directions request failed due to ' + status);
			      }
			    });
			  };
		  ////////////////////////////// END /////////////////////////////////


		  ////////////////// Submit origin_place and destination /////////////////

		  $(document).ready(function() {
		    $("#submission_form").click(function() {
		        var contents_origin = $("#origin-input").val();
		        $("#input_location").val(contents_origin);
		        var contents_destination = $("#destination-input").val();
		        $("#input_destination").val(contents_destination);
		    });
			});
		  ////////////////////////////// END //////////////////////////

		 });
		}

    </script>
    <script src="//maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_API_KEY']%>&signed_in=true&libraries=places&callback=initMap"
        async defer></script>
  </body>


<div id="group-form" class="section">

	<%= render 'form'  %>

</div>
